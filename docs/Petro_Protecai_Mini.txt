ESTUDO PRELIMINAR DO QUE ESPERAMOS MINIMAMENTE DO PROJETO PETRO_PROTECAI_MINIVERSÃO MINIMALISTA DO PROJETO PETRO_PROTECAIPONTOS CHAVES.1. Trabalhar com IEEE 14 barras --> não reproduz situação real2. Trabalhar com LR buscando assertividade e tempo de respostas mínimo3. Desenvolver back4. Desenvolver Front5. Usar PostgreSQL – com Docker6. Trabalhar com CI/CD – GitHub Actions7. Desenvolver API8. Simular sistemas com PandaPower9. Queremos que todo código seja tratado e executado a partir da raiz do projeto. Nota: executar qualquer script Python do projeto a partir da raiz (protecai_mini/), sem a necessidade de navegar até subdiretórios como simuladores/pandapower/, src/backend/, tests/, etc.PARA ALCANÇAR ESSE COMPORTAMENTO COM CLAREZA, MODULARIDADE E ROBUSTEZ, DEVEMOS GARANTIR OS SEGUINTES PONTOS:1. IMPORTAÇÕES RELATIVAS E ABSOLUTAS BEM DEFINIDAS* Os scripts devem usar importações relativas à raiz do projeto ou configurar o PYTHONPATH corretamente.2. USO DE __INIT__.PY PARA INDICAR PACOTES* Cada pasta com código reutilizável (ex: simuladores/pandapower, src/backend) deve conter um __init__.py, mesmo vazio.3. CONFIGURAÇÃO DO SYS.PATH NO PONTO DE ENTRADAInclua o seguinte snippet nos scripts que serão chamados diretamente (ex: scripts_simulacao.py, test_simulation.py):import sysfrom pathlib import PathNota: o termo snippet refere-se a um trecho curto e reutilizável de código-fonte que executa uma tarefa específica ou serve como exemplo de uma determinada funcionalidade. Snippets são frequentemente usados para acelerar o desenvolvimento, padronizar soluções e compartilhar boas práticas entre desenvolvedores. Eles podem ser armazenados em bibliotecas pessoais, plugins de editores de texto (como VS Code), ou em plataformas colaborativas como o Stack Overflow ou GitHub Gist. Embora curtos, snippets devem ser claros, funcionais e seguros para integração em projetos maiores.Como exemplo, essa função que verifica se um número é primo:ADICIONA A RAIZ DO PROJETO AO SYS.PATHROOT = Path(__file__).resolve().parents[2]  # Ajuste conforme a profundidade da sua estrutura de diretóriossys.path.append(str(ROOT))4. ORGANIZAÇÃO DOS DIRETÓRIOSA estrutura atual (deverá ser alterada ao longo do projeto) deverá minimamente conter: 5. EXECUÇÃO A PARTIR DA RAIZCom isso, execute os comandos como:python simuladores/pandapower/scripts_simulacao.pypython tests/test_simulation.py       pytest tests/ (rodar todos os testes)?? ROTEIRO ESTRATÉGICO: PETRO_PROTECAI? ETAPA 1 – SIMULAÇÃO ELÉTRICA BASE* IEEE 14 Barras carregado com pandapower 2.14.1. Atenção problemas com a versão 3.1.2 (até a datas destes testes 21/06/25)* Simulação de fluxo de carga (runpp)* Exportação e leitura do .json* Testes automatizados e CI/CD funcionando? ETAPA 2 – MODELAGEM DE INFRAESTRUTURA DE PROTEÇÃO (?? EM PLANEJAMENTO)Objetivo: adicionar representações computacionais de relés, disjuntores, transformadores, controllers, fusíveis (simulados) e lógica de atuação.Ações:* Adicionar classes e estruturas de dados para representar ativos de proteção (POO)o Relés com curvas típicas (ANSI 50/51, 67, 87T, 27/59)o Disjuntores e tempo de atuaçãoo Fusíveis simuladoso Transformadoreso Geradoreso Cargaso Controllerso Coordenação temporizada* SIMULAR EVENTOS DE CURTO-CIRCUITO COM:   pandapower.runpp() + run_timeseries() ou shortcircuit()* MAPEAR RESPOSTAS ESPERADAS PARA TREINAMENTO DO RL QUE DEVERÁ SER AVALIADO CRITERIOSAMENTE PARA QUE TENHA CAPACIDADE DE RESPOSTA EM TEMPO HÁBIL.?? SUBETAPA 2.0 – ESPECIFICAÇÃO DO CENÁRIO ELÉTRICO E DE PROTEÇÃOObjetivo: definir a topologia estendida do IEEE 14 Barras com a inclusão lógica e funcional de ativos de proteção (mesmo que o modelo físico base não os possua).ELEMENTOS A ESPECIFICAR:* Barras críticas (p.ex. Barra 4 ou Barra 5 para distribuição)* Linhas sensíveis ou com múltiplas interligações* Posicionar os transformadores (2) e geradores (1) em pontos estratégicos nas barras escolhidas para simulações iniciais* Instalação dos relés de proteção:o Tipos: ANSI 50/51 (sobrecorrente instantânea e temporizada), ANSI 67 (direcional), além dos outros acima mencionados, a saber 87T e 27/59.o Pontos de atuação (em cada ponto estratégico da malha escolhida para as simulações, será fundamental, pois estamos trabalhando com coordenação da proteção e queremos ter condições de remodelar a rede em caso de alguma falha)* Disjuntores associados:o Relação com relés (relé ? comanda ? disjuntor)o Tempo de abertura (fixo? variável? parametrizado?)* Curvas de atuação:o Típicas para cada tipo de reléo Inclusão em função ou tabelaSAÍDA ESPERADA:* Documento ou script config_protecao.py contendo:o Mapeamento da rede com os dispositivos inseridoso Lista de objetos Rele, Disjuntor, Protecao com parâmetros configuradoso Comentários explicativos e estrutura totalmente modular* Diagrama (será obrigatório) da topologia com proteção* Plano de testes: cenários esperados para atuação de proteção* Coordenograma dinâmico no contexto do projeto e dos testes realizados?? ETAPA 3 – ALGORITMO DE COORDENAÇÃO INTELIGENTE (IA)Objetivo: desenvolver uma inteligência que coordene a atuação dos dispositivos de proteção automaticamente.Ações:* Adotar Reinforcement Learning RL (inicialmente com ambiente simulado)* Definir estados, ações e recompensas --> IMPORTANTE deve refletir preocupação com as normas de proteção e assegurar que os tempos de resposta atendam aos requisitos das Normas de Proteção e Segurança:o Estado: condição da rede, valores de corrente, tensão, falhao Ação: disparo de relé, abertura de disjuntoro Recompensa:1. Evitar Blackout Total: ? Recompensa positiva alta quando o sistema mantém fornecimento em partes da rede mesmo após falhas.2. Seletividade Garantida: ? Recompensa quando apenas o dispositivo mais próximo da falha atua, sem desligamentos em cascata.3. Interrupção Mínima (Menor Duração): ? Recompensa inversamente proporcional ao tempo de interrupção. Menor tempo, maior a recompensa.4. Isolamento Rápido e Correto da Falha: ? Recompensa por detectar e isolar rapidamente a falha com o disjuntor ou relé correto.5. Estabilidade Pós-Falha: ? Recompensa se a rede retorna a uma condição operacional estável após a atuação.6. Manutenção da Tensão e Frequência Nominais: ? Recompensa proporcional à proximidade dos valores de tensão e frequência aos valores ideais.7. Atuação Preventiva com Tempo de Margem: ? Recompensa por tomar decisões que evitam sobrecargas iminentes ou atuações simultâneas.8. Compatibilidade com Normas (ex: IEEE 242, NBR 14039): ? Recompensa extra se a coordenação segue critérios normativos pré-definidos.o Penalidades:1. Blackout Geral: ? Penalidade máxima se há desligamento total da rede.2.  Falta de Seletividade (Desligamento Indevido em Cascata): ? Penalidade alta se múltiplos dispositivos atuam sem necessidade.3. Não Atuar em Caso de Falha Crítica: ? Penalidade severa se o sistema falha em isolar uma falha ativa.4. Desligamento de Cargas Críticas: ? Penalidade se o agente desliga consumidores prioritários (ex: hospital, centro de controle).5. Tempo Excessivo para Isolar a Falha: ? Penalidade crescente quanto maior for o tempo de resposta.6. Atuação Redundante (dupla ou tripla comutação): ? Penalidade quando mais de um relé atua onde não seria necessário.7. Oscilações ou Atuação Intermitente: ? Penalidade se há liga/desliga recorrente dos dispositivos (instabilidade operacional).8. Violação de Limites Operacionais (V, I, f): ? Penalidade se tensões, correntes ou frequência excedem os limites aceitáveis após a ação.* Treinar modelo com ambientes sintéticos buscando maior proximidade possível com o ambiente real.?? ETAPA 4 – CONSTRUÇÃO DA API REST (FASTAPI)Para permitir integração com o frontend e modularização da simulaçãoEndpoints:* /run/simulation ? executar fluxo de carga com parâmetros* /fault/inject ? simular curto-circuito* /protection/decision ? acionar decisão do agente RL* /report ? retornar resultados (perdas, tensões, relés atuados)?? ETAPA 5 – INTERFACE WEB (REACT + TAILWIND + VITE) ??Simples e eficiente para interação de operadores com simulações e análiseFunções esperadas:* Visualização do sistema e topologia* Inserção de falhas e eventos* Acompanhamento de atuação da proteção* Geração de relatórios técnicos?? ETAPA 6 – TESTES DE ALTA CONFIABILIDADEInclusão de testes para:* Avaliação de coordenação correta* Cenários de falha (linha, barra, carga)* Comparação entre lógica especialista e RL?? CONSIDERAÇÕES TÉCNICAS FINAIS* IEEE 14 barras será estendido: adicionaremos camadas lógicas de proteção — mesmo que não sejam físicas no modelo original.* Caso seja necessário, podemos considerar migrar para modelos com mais granularidade (IEEE 30 barras ou modelos industriais customizados).* Tudo será mantido modular, testável e reprodutível, com apoio de CI/CD, testes com pytest, padrões PEP 8 e docstrings.
MODELANDO O CENÁRIO PARA QUE O PROJETO SEJA O MAIS REALISTA POSSÍVEL?? REVISÃO ESTRATÉGICA DA ESPECIFICAÇÃO DO CENÁRIO DE TESTESProjeto: PETRO_ProtecAI_MINIFoco: Coordenação de proteção elétrica automatizada via RL em ambiente offshore Contexto: Plataforma de petróleo com rede elétrica em média tensão (13,8 kV ou 6,6 kV)?? OBJETIVO DO CENÁRIO DE TESTE* Simular uma rede elétrica realista de uma plataforma de petróleo com dispositivos de proteção atuando coordenadamente em resposta a falhas.* Garantir que o algoritmo de RL coordene a atuação de relés e disjuntores com seletividade, rapidez e confiabilidade.* Possibilitar a visualização e controle da rede via API e frontend React.?? PREMISSAS TÉCNICAS* Tensão nominal ajustada: 13,8 kV (média tensão offshore padrão)* Topologia baseada no modelo IEEE 14 barras, modificado logicamente para incluir ativos de proteção.* Todos os dispositivos de proteção serão representados como camadas lógicas (software).??? DISPOSITIVOS DE PROTEÇÃO A SEREM MODELADOSTipoANSIDescriçãoAplicação típicaRelé Instantâneo de Sobrecorrente50Atuação imediata em caso de sobrecorrenteAlimentadores, disjuntores de entradaRelé Temporizado de Sobrecorrente51Atuação coordenada com curva inversaLinhas e cargas seletivasRelé Direcional de Corrente67Discrimina sentido da corrente de falhaSistemas em anel, redundânciaRelé Diferencial de Transformador87TProtege transformadores contra faltas internasTransformador principalDisjuntores—Executa abertura sob comando do reléTodos os pontos de seccionamento?? PROPOSIÇÃO DO CENÁRIO BASE:Tipo de DispositivoFunçãoLocais Sugeridos (exemplo)Relé 50/51 (Sobrecorrente)Proteção de feeders e linhasBarras 3–4, 4–5, 5–6, 6–13Relé 67 (Direcional)Evita disparos indevidos em fluxos reversosBarras próximas a geradores (2, 3, 6)Relé 87T (Diferencial)Proteção de transformadoresBarras 2–4, 4–5 (conexões com G e T)Relé 27/59 (Sub/Sobretensão)Proteção de cargas sensíveis ou controle de qualidadeBarras com carga (7, 9, 10, 14)Disjuntores (com tempo)Abertura física do circuito após atuação dos relésNas saídas de transformadores e geradoresFusíveis (simulados)Proteção passiva para ramais menoresBarras 12, 13, 14Transformadores (2 transformadores)Dois transformadores de potência a óleo com potência de 25 MVAInseridos entre as barras 1–5 e 2–6.??? DISTRIBUIÇÃO INICIAL SUGERIDA (EXEMPLO PRELIMINAR)Ponto da RedeDispositivoTipoProtege o quê?CurvaPickup [A]Tempo base [s]ObservaçõesBarra 1Relé 87TDif.Transformador de entrada———Transformador trifásico principalBarra 2Relé 67Dir.Linha 2–4Inversa4000.2Ver sentidoBarra 4Relé 51Temp.Linha 4–5Inv.3000.4Coord. com relé 2Linha 6–13Relé 67Dir.Linha 6–13Inversa2500.3RedundânciaBarra 7Relé 50Inst.Alimentador—600—Proteção rápidaBarra 9Relé 27/59Sub/SobCarga sensível———Controle de qualidade (tensão)Barra 10Relé 27/59Sub/SobCarga crítica———Qualidade de fornecimentoBarra 14Relé 27/59Sub/SobCarga secundária———Possível monitoramento remotoBarra 12Fusível—Ramal menor———Proteção passivaBarra 13Fusível—Ramal menor———Simulação de atuação passivaBarra 5Disjuntor—Acoplado a relés 51 e 87T———Atuação lógica conjuntaBarra 6Disjuntor—Acoplado a relé 67———Manobra em falhas reversasBarra 1–5Transformador—Acoplamento entre barras———Transformador de 25 MVA a óleoBarra 2–6Transformador—Acoplamento entre barras———Transformador de 25 MVA a óleo?? ESSA TABELA SERÁ REFINADA CONFORME EVOLUIRMOS O MODELO LÓGICO DA REDE.??? PRÓXIMAS AÇÕES RECOMENDADAS1. ?? Diagramar o novo sistema com os ativos de proteção posicionados logicamente.2. ?? Criar classes base para:o ReleBase ? heranças: Rele51, Rele50, Rele67, Rele87To Disjuntor com tempos e status (aberto/fechado)3. ? Adicionar falhas simuladas (curto monofásico, bifásico, trifásico) e seu impacto no sistema.4. ?? Gerar matriz de atuação esperada: base para comparar com decisões do RL.5. ? Validar com testes automatizados.6. ?? Iniciar ambiente para aprendizado por reforço, definindo espaço de estado, ações e recompensas.?? SOBRE A MODELAGEM IEEE 14* O modelo original não tem relés nem disjuntores.* Estamos estendendo logicamente a topologia do IEEE 14, mantendo compatibilidade elétrica, mas agregando camadas de proteção simuladas.* Se necessário, mais adiante, migramos para IEEE 30, IEEE 57 ou modelo real da Petrobras.IEEE 14 BARRAS
?? PRÓXIMOS PASSOS ESTRATÉGICOS ?? ETAPA 2 – MODELAGEM DE PROTEÇÃO (EM ANDAMENTO)1. Definir cenário realista para o ProtecAI_mini:o Tensão nominal readequada (por ex. 13,8kV ou 6,6kV — típico de plataformas offshore)o Substituir/ajustar os 132kV do modelo original2. Distribuir os dispositivos de proteção no IEEE14:o Identificar barramentos críticos, linhas protegidas, transformadoreso Inserir:* ?? Relés de sobrecorrente (50/51)* ?? Relés direcionais (67)* ?? Relés diferenciais de transformador (87T)* ?? Relés de subtensão (27) e sobretensão (59)* ?? Disjuntores e fusíveis com tempos de atuação simuláveis3. Criar estrutura OO para esses ativos:o Classe ProtecaoEletrica, com subclasses Rele51, Rele67, Rele87, Disjuntor, etc.o Atributos como: corrente de disparo, tempo de atuação, curva característica, posição na rede?? ETAPA 3 – COORDENAÇÃO INTELIGENTE COM RL* Definir ambiente de simulação:o Estado: valores elétricos + estado dos dispositivoso Ação: abrir/fechar disjuntores, acionar reléso Recompensa: penalidade por blackouts, bônus por seletividade e mínima interrupção* Simular falhas com pandapower.runpp() + shortcircuit() para resposta dos relés* Implementar lógica inicial de coordenação (baseline) para comparar com IA?? ETAPA 4 – BACKEND FASTAPI* Endpoints:o /run/loadflowo /inject/faulto /protection/statuso /report/generate?? ETAPA 5 – INTERFACE WEB (REACT)* Simples, mas funcional para:o Inserção de falhaso Visualização da rede e dispositivoso Acompanhamento das decisões da IAo Geração de relatórios?? ETAPA 6 – VALIDAÇÃO E ROBUSTEZ* Comparação da atuação dos dispositivos sob:o Falhas trifásicas, monofásicaso Curto em barra, em linhao Análise de seletividade* Testes com RL vs. lógica especialista* Avaliação de desempenho em termos de:o Tempo de atuaçãoo Quantidade de consumidores desligadoso Robustez sob condições extremas? ConclusãoO projeto avança com clareza. A próxima etapa exige modelagem precisa de dispositivos de proteção e inserção coerente no IEEE14. Como o modelo atual precisa ser enriquecido com essa lógica, e os diagramas só devem ser retomados após isso.SEGUIR PARA:* Criação das classes Rele51, Rele67, Rele87T, etc.* Inserção desses dispositivos no modelo IEEE 14 barras* Representação visual lógica (e depois gráfica) da topologia com proteção
? RESUMO VALIDADO DA ETAPA 2 – MODELAGEM DE PROTEÇÃO (PROTECAI_MINI)?? 1. AJUSTE DO CENÁRIO DE TENSÃO* A tensão de 132 kV do modelo IEEE14 barras deve ser ajustada para valores compatíveis com redes offshore, como:o 13,8 kV (comum em redes de média tensão em plataformas)o 6,6 kV (usado em motores e sistemas auxiliares)* Transformadores do modelo devem refletir essa adequação.* Será necessário atualizar o .json ou os parâmetros da rede com o novo valor de vn_kv das barras.?? 2. CRIAÇÃO DE ESTRUTURA OO PARA OS ATIVOSOrganizar a infraestrutura de proteção como classes Python reutilizáveis e testáveis, com base em boas práticas de Engenharia de Software:SCRIPT PARA EXECUÇÃO DOS TESTES: pytest --cov=infra.protecao --cov-report=term-missing tests/SCRIPT PARA ANÁLISE DE LINHAS FALTANTES – MISSINGpytest --cov=infra.protecao --cov-report=html tests/PENSANDO EM SIMULAR DEPLOY?? O que falta para simular um Deploy1. Simulação local via Docker Compose (deploy containerizado)Criar um stage no CI para:* Fazer build dos containers (frontend, backend)* Subir com docker-compose up -d* Validar com curl ou httpx2. Simulação de Deploy remoto (Staging)Pode ser feito com:* Deploy para ambiente GitHub Pages (somente frontend)* Deploy do backend para Render, Railway, Heroku, ou via scp/rsync em servidor SSH* Armazenamento de imagens Docker no DockerHub ou GitHub Container Registry?? Etapa básica para simulação local via GitHub ActionsAdicionar no workflow .yaml:      - name: ?? Build e Teste dos containers        run: |          docker-compose up --build -d          sleep 10          curl -f http://localhost:8000/docs || exit 1          curl -f http://localhost:5173 || exit 1NOTA: ISSO SIMULA UM DEPLOY LOCAL E TESTA SE A API E O FRONTEND ESTÃO NO AR.
sábado, 21 de junho de 2025? STATUS ATUAL DO PROJETO PETRO_PROTECAI MINI?? ESCOPO E OBJETIVOSimular coordenação automatizada de proteção elétrica em redes offshore, utilizando:* Modelo IEEE 14 Barras modificado logicamente* Dispositivos de proteção modelados via POO (Relés 50/51/67/87T, Disjuntores, etc.)* Lógica futura de decisão via Reinforcement Learning (RL)?? ETAPA ATUAL: MODELAGEM DE INFRAESTRUTURA DE PROTEÇÃOVocê está na Etapa 2 do roteiro estratégico, com foco em:TarefaStatusCriação das classes ReleXX e Disjuntor (OO)? em cursoInserção lógica desses dispositivos no IEEE 14?? a iniciarDefinição das zonas de proteção e parâmetros?? a definirConstrução do diagrama da topologia estendida?? pendenteMapeamento de falhas e atuação esperada?? pendenteExecução das simulações com curto?? pendente?? PRÓXIMAS AÇÕES TÉCNICAS1. Criar script config_protecao.pya. Mapeia a topologia com relés/disjuntores nos pontos definidos:b. Ex: Rele87T na barra 1, Rele67 na 2, Rele51 na 4, etc.c. Instancia todos os objetos e retorna estrutura modulard. Foco: integrável, reutilizável e testável2. Atualizar o JSON IEEE14 (vn_kv ≈ 13.8kV)a. Ajustar vn_kv das barrasb. Opcional: renomear para ieee14_protecao.json para versão estendida3. Simular atuação de falhasa. Usar pandapower.runpp() e run_short_circuit() (se aplicável)b. Testar atuação lógica dos relés com base nas correntes e tensões4. Criar matriz de atuação esperadaa. Fundamenta os testes automatizadosb. Base para RL comparar/treinar sua atuação5. Preparar o ambiente do RL (Etapa 3)a. Definir espaço de estado, ações e recompensasb. Simular episódios com falhas e atuação esperadac. Comparar com baseline especialista?? IMPORTANTE: MODELO IEEE 14 BARRAS* Será mantido, mas com camadas lógicas adicionais* Não há disjuntores nem relés no modelo original* O projeto trata isso por software, com modelagem inteligente e simulação adaptativa?? DEPLOY* Confirmado: será simulado inicialmente via Docker local* O deploy real (Render, Railway, etc.) será avaliado após amadurecimento das etapas 3–4* O pipeline de CI/CD já está preparado para suportar o crescimentoPRÓXIMOS PASSOS:1. Criar o esqueleto inicial de config_protecao.py2. Ajudar a ajustar o .json com as tensões adequadas3. Criar um teste base para validar a atuação de cada relé em um cenário simuladoIMPORTANTE: o Deploy Local com Docker será o primeiro passo de simulação no CI/CD, e que o Deploy real (staging ou produção) será retomado quando o projeto avançar mais.
sábado, 21 de junho de 2025PLANO DE AÇÃO? ROTEIRO ESTRATÉGICO REFINADO – PETRO_PROTECAI MINI?? ETAPA 1 – SIMULAÇÃO ELÉTRICA BASE ??* IEEE 14 Barras carregado e funcional via pandapower 2.14.1* Simulação de fluxo de carga (runpp)* Exportação e leitura do .json* CI/CD e testes básicos funcionando* ? Finalizada?? ETAPA 2 – MODELAGEM DE PROTEÇÃO (?? EM EXECUÇÃO)?? Objetivo:Construir uma representação lógica e funcional dos dispositivos de proteção elétrica inseridos no sistema IEEE 14 modificado, com foco em seletividade e coordenação.?? SUBETAPA 2.1 – AJUSTES ESTRUTURAIS E PRÉ-REQUISITOSTarefaAçãoRenomear arquivo baseieee14.json ? ieee14_protecao.jsonAjustar tensãoSubstituir valores típicos de 132kV por 13,8kV nas barrasGarantir modularidadeCriação do script config_protecao.pyPadronizar execuçõesExecução sempre pela raiz, com sys.path ajustadoValidar diretórios com __init__.pyConfirmar pacotes Python reconhecidos?? SUBETAPA 2.2 – MODELAGEM DE ATIVOS DE PROTEÇÃOAtivoModelagemRelés ANSI 50/51, 67, 87T, 27, 59Classes herdando de ProtecaoEletricaDisjuntoresClasse Disjuntor, com tempo e statusLógica de coordenaçãoIncorporar tempo, seletividade e curvas típicasMapeamento na redeLocalização lógica por barra ou linha protegida?? SUBETAPA 2.3 – CONSTRUÇÃO DA LÓGICA DE COORDENAÇÃO* Caracterizar seletividade: relés à jusante devem atuar antes dos à montante* Modelar tempo de atuação parametrizado (tempo_atuacao)* Criar funções que verifiquem conflitos de atuação* Simular cenários onde múltiplos relés estão sujeitos à falha?? SUBETAPA 2.4 – GERAÇÃO DOS SCRIPTS DE TESTETarefaDescriçãoTestes unitáriostest_config_protecao.py, test_atuacao_temporizada.py, etc.Cobertura completaUsar pytest com --cov, manter 100%Plano de testesCobrir relés em todas as combinações possíveis (atuar/não atuar; coordena/não coordena)Lógica de falhasInclusão de eventos de curto (monofásico, bifásico, trifásico)?? ETAPA 3 – COORDENAÇÃO INTELIGENTE COM RL (?? SOMENTE APÓS TESTES)Requisitos préviosDescriçãoAmbiente 100% testadoScripts estáveis, com cobertura e CI/CD validandoLógica de atuação validadaSeletividade e coordenação bem caracterizadasCurvas e limites definidosParâmetros claros para tempo, pickup, zonasBase de simulaçõesGeração de dados para RL com rótulos confiáveis?? ETAPA 4 – BACKEND COM FASTAPIENDPOINTS PROPOSTOS:* /run/loadflow* /inject/fault* /protection/status* /protection/coordination* /report/generate?? ETAPA 5 – INTERFACE WEB (REACT + TAILWIND)OBJETIVOS:* Inserir falhas manualmente* Visualizar rede e resposta dos dispositivos* Comparar RL x especialista* Relatórios automatizados?? ETAPA 6 – TESTES DE CONFIABILIDADE E VALIDAÇÃO FINAL* Testes de falhas específicas (linha, barra, carga)* Verificação de atuação esperada vs atuação RL* Comparação em tempo de atuação e impacto de desligamentos?? AJUSTES NO ARQUIVO .YAML (CI/CD)Necessário:* Incluir o script config_protecao.py na cobertura* Validar que ele roda com pytest* Incluir etapa de simulação curta com disjuntores + relés* Garantir ambiente isolado para simulações curtas e rápidas no CIGERAR ESSE PATCH QUANDO CONCLUIR CONFIG_PROTECAO.PY.? CONCLUSÃOO foco agora deve estar em modelar corretamente a lógica de proteção e garantir que tudo esteja testado antes de avançar para RL. Este roteiro já incorpora todas as suas observações e decisões anteriores.Trabalhar a criação do esqueleto para config_protecao.py, com mapeamento inicial dos relés e disjuntores conforme a lógica de seletividade.NOTA: A LÓGICA DE PROTEÇÃO SERÁ ACOPLADA DINAMICAMENTE VIA CAMADA DE SOFTWAREOU SEJA:* O config_protecao.py instancia os objetos de proteção* Os objetos são vinculados dinamicamente às barras e linhas existentes* Em tempo de execução, uma camada (por exemplo, simulador_protecao.py) faz:net = from_json("ieee14_protecao.json")  # topologia puraprotecao = configurar_dispositivos_protecao()  # relés e disjuntores* Essa camada será responsável por:o Monitorar tensões, correntes nas barras/linhaso Decidir se um relé atuao Acionar o disjuntor correspondenteo Remover elementos da topologia, se necessário? CONCLUSÃO?? Não alteramos o arquivo .json diretamente. Em vez disso:* Criamos o ieee14_protecao.json como versão elétrica estendida (ex: com mais linhas ou transformadores, se necessário)* Mantemos a proteção como camada acoplável e independente?? RECOMENDAÇÃOSe ainda não o fizermos, vamos gerar o ieee14_protecao.json agora mesmo como cópia do original com possíveis adaptações (ex: renomear, incluir nova linha se necessário).Deseja que criemos esse novo arquivo ieee14_protecao.json com a topologia pronta para simulação?Atenção: essa figura não representa o cenário de testes, é apenas uma imagem sugestiva do que pretendemos realizar.
segunda-feira, 23 de junho de 2025? SCRIPTS DE TESTES A SEREM AVALIADOS E REFATORADOSScriptMotivo da RefatoraçãoAções Necessáriastests/test_pipeline.pyA pipeline pode agora incluir transformadores no grafo de simulaçãoValidar se os dados dos transformadores estão sendo corretamente processadostests/test_config_protecao.pyAs configurações de proteção incluirão Relés 87T futuramenteIncluir testes para novos parâmetros ou exceções esperadastests/test_visualizacao.py (caso exista)Visualização passa a incluir novos ativos como trafosValidar presença de cores, símbolos e posição coerente de trafostests/test_ieee14_protecao.py (sugerido)Para validar o JSON gerado com novos ativosComparar estrutura, quantidade de ativos, coerência de conexões e chaves2