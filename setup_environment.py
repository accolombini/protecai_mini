#!/usr/bin/env python3
'''
    ||> Script de Instala√ß√£o Inteligente - ProtecAI_Mini Laboratory
        - Verifica depend√™ncias instaladas
        - Instala apenas bibliotecas faltantes
        - Otimiza ambiente para ML/AI em coordena√ß√£o de prote√ß√£o
        - Gera relat√≥rio de compatibilidade
'''

import subprocess
import sys
from pathlib import Path
import pkg_resources
import time
from typing import List, Dict, Tuple

class EnvironmentSetup:
    """Configurador inteligente do ambiente ProtecAI_Mini."""
    
    def __init__(self):
        self.requirements_file = Path("requirements.txt")
        self.installed_packages = self._get_installed_packages()
        self.missing_packages = []
        self.incompatible_packages = []
        self.success_installs = []
        self.failed_installs = []
        
    def _get_installed_packages(self) -> Dict[str, str]:
        """Obt√©m lista de pacotes j√° instalados."""
        installed = {}
        try:
            for pkg in pkg_resources.working_set:
                installed[pkg.project_name.lower()] = pkg.version
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar pacotes instalados: {e}")
        return installed
    
    def _parse_requirements(self) -> List[Tuple[str, str]]:
        """Parse do arquivo requirements.txt."""
        requirements = []
        
        if not self.requirements_file.exists():
            print(f"‚ùå Arquivo {self.requirements_file} n√£o encontrado")
            return requirements
        
        with open(self.requirements_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '==' in line:
                    package, version = line.split('==')
                    requirements.append((package.strip(), version.strip()))
        
        return requirements
    
    def analyze_dependencies(self):
        """Analisa depend√™ncias e identifica pacotes faltantes."""
        print("üîç ANALISANDO DEPEND√äNCIAS DO LABORAT√ìRIO")
        print("=" * 50)
        
        requirements = self._parse_requirements()
        
        for package, required_version in requirements:
            package_lower = package.lower().replace('_', '-')
            
            if package_lower in self.installed_packages:
                installed_version = self.installed_packages[package_lower]
                if installed_version == required_version:
                    print(f"‚úÖ {package}: {installed_version} (OK)")
                else:
                    print(f"‚ö†Ô∏è {package}: {installed_version} ‚Üí {required_version} (ATUALIZAR)")
                    self.incompatible_packages.append((package, required_version))
            else:
                print(f"‚ùå {package}: {required_version} (FALTANDO)")
                self.missing_packages.append((package, required_version))
        
        print(f"\nüìä RESUMO:")
        print(f"   ‚Ä¢ Pacotes faltando: {len(self.missing_packages)}")
        print(f"   ‚Ä¢ Pacotes para atualizar: {len(self.incompatible_packages)}")
    
    def install_packages(self, force_reinstall: bool = False):
        """Instala pacotes faltantes e incompat√≠veis."""
        to_install = self.missing_packages + (self.incompatible_packages if force_reinstall else [])
        
        if not to_install:
            print("‚úÖ Todos os pacotes est√£o instalados e atualizados!")
            return True
        
        print(f"\nüöÄ INSTALANDO {len(to_install)} PACOTES")
        print("=" * 50)
        
        # Categorizar instala√ß√µes por prioridade
        priority_packages = [
            'numpy', 'pandas', 'matplotlib', 'scipy', 'scikit-learn',
            'torch', 'gymnasium', 'stable-baselines3'
        ]
        
        ml_packages = [
            'tensorflow', 'keras', 'xgboost', 'lightgbm', 'catboost'
        ]
        
        # Instalar por categoria
        categories = [
            ("üìä CORE DATA SCIENCE", priority_packages),
            ("üß† MACHINE LEARNING", ml_packages),
            ("üîß OUTROS", [])
        ]
        
        for category_name, category_packages in categories:
            category_installs = [
                (pkg, ver) for pkg, ver in to_install 
                if pkg.lower() in [p.lower() for p in category_packages]
            ]
            
            if category_name == "üîß OUTROS":
                # Adicionar pacotes que n√£o est√£o nas outras categorias
                installed_in_categories = set()
                for _, cat_pkgs in categories[:-1]:
                    installed_in_categories.update([p.lower() for p in cat_pkgs])
                
                category_installs = [
                    (pkg, ver) for pkg, ver in to_install 
                    if pkg.lower() not in installed_in_categories
                ]
            
            if category_installs:
                print(f"\n{category_name}")
                print("-" * 30)
                self._install_category(category_installs)
        
        return len(self.failed_installs) == 0
    
    def _install_category(self, packages: List[Tuple[str, str]]):
        """Instala pacotes de uma categoria espec√≠fica."""
        for package, version in packages:
            print(f"üì¶ Instalando {package}=={version}...")
            
            try:
                # Comando de instala√ß√£o
                cmd = [sys.executable, "-m", "pip", "install", f"{package}=={version}"]
                
                # Executar instala√ß√£o
                result = subprocess.run(
                    cmd, 
                    capture_output=True, 
                    text=True, 
                    timeout=300  # 5 minutos por pacote
                )
                
                if result.returncode == 0:
                    print(f"   ‚úÖ {package} instalado com sucesso")
                    self.success_installs.append(package)
                else:
                    print(f"   ‚ùå Erro ao instalar {package}")
                    print(f"   üîç {result.stderr[:100]}...")
                    self.failed_installs.append((package, result.stderr))
                    
            except subprocess.TimeoutExpired:
                print(f"   ‚è∞ Timeout na instala√ß√£o de {package}")
                self.failed_installs.append((package, "Timeout"))
                
            except Exception as e:
                print(f"   ‚ùå Erro inesperado: {e}")
                self.failed_installs.append((package, str(e)))
    
    def verify_critical_packages(self):
        """Verifica se pacotes cr√≠ticos est√£o funcionando."""
        print("\nüß™ VERIFICANDO FUNCIONALIDADE DOS PACOTES CR√çTICOS")
        print("=" * 50)
        
        critical_tests = [
            ("NumPy", "import numpy as np; print(f'NumPy {np.__version__} OK')"),
            ("Pandas", "import pandas as pd; print(f'Pandas {pd.__version__} OK')"),
            ("PandaPower", "import pandapower as pp; print(f'PandaPower {pp.__version__} OK')"),
            ("Matplotlib", "import matplotlib.pyplot as plt; print('Matplotlib OK')"),
            ("Scikit-Learn", "import sklearn; print(f'Scikit-Learn {sklearn.__version__} OK')"),
            ("PyTorch", "import torch; print(f'PyTorch {torch.__version__} OK')"),
            ("Stable-Baselines3", "import stable_baselines3; print(f'SB3 {stable_baselines3.__version__} OK')"),
            ("Gymnasium", "import gymnasium; print(f'Gymnasium {gymnasium.__version__} OK')"),
        ]
        
        working_packages = []
        broken_packages = []
        
        for name, test_code in critical_tests:
            try:
                result = subprocess.run(
                    [sys.executable, "-c", test_code],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result.returncode == 0:
                    print(f"‚úÖ {name}: {result.stdout.strip()}")
                    working_packages.append(name)
                else:
                    print(f"‚ùå {name}: ERRO")
                    broken_packages.append(name)
                    
            except Exception as e:
                print(f"‚ùå {name}: ERRO - {e}")
                broken_packages.append(name)
        
        return len(broken_packages) == 0, working_packages, broken_packages
    
    def generate_report(self):
        """Gera relat√≥rio final da instala√ß√£o."""
        print("\nüìã RELAT√ìRIO FINAL DE INSTALA√á√ÉO")
        print("=" * 50)
        
        # Verificar funcionalidade
        all_working, working, broken = self.verify_critical_packages()
        
        # Estat√≠sticas
        total_required = len(self.missing_packages) + len(self.incompatible_packages)
        success_rate = (len(self.success_installs) / max(total_required, 1)) * 100
        
        report = f"""
üéØ RESUMO DA CONFIGURA√á√ÉO DO LABORAT√ìRIO PROTECAI_MINI
{'='*60}

üì¶ INSTALA√á√ïES:
   ‚Ä¢ Pacotes instalados com sucesso: {len(self.success_installs)}
   ‚Ä¢ Pacotes com falha: {len(self.failed_installs)}
   ‚Ä¢ Taxa de sucesso: {success_rate:.1f}%

üîß FUNCIONALIDADE:
   ‚Ä¢ Pacotes cr√≠ticos funcionando: {len(working)}
   ‚Ä¢ Pacotes com problemas: {len(broken)}
   ‚Ä¢ Status geral: {'‚úÖ PRONTO' if all_working else '‚ö†Ô∏è NECESSITA ATEN√á√ÉO'}

üß† CAPACIDADES DISPON√çVEIS:
   ‚Ä¢ An√°lise de dados: Pandas, NumPy, Matplotlib, Seaborn
   ‚Ä¢ Simula√ß√£o el√©trica: PandaPower, SciPy
   ‚Ä¢ Machine Learning: Scikit-Learn, XGBoost, LightGBM
   ‚Ä¢ Deep Learning: PyTorch, TensorFlow
   ‚Ä¢ Reinforcement Learning: Stable-Baselines3, Gymnasium
   ‚Ä¢ Visualiza√ß√£o: Matplotlib, Seaborn, Plotly
   ‚Ä¢ Otimiza√ß√£o: Optuna, HyperOpt
   ‚Ä¢ Explicabilidade: SHAP, LIME

üí° PR√ìXIMOS PASSOS:
   1. Executar demonstra√ß√£o RL: python demonstracao_rl_completa.py
   2. Gerar visualiza√ß√µes: python simuladores/power_sim/visualizar_toplogia_protecao.py
   3. Executar testes: python run_tests.py
   4. Iniciar desenvolvimento do laborat√≥rio completo

"""
        
        print(report)
        
        # Salvar relat√≥rio
        report_path = Path("docs/relatorio_ambiente_ml.txt")
        report_path.parent.mkdir(exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
            if self.failed_installs:
                f.write(f"\n‚ùå FALHAS DETALHADAS:\n")
                for package, error in self.failed_installs:
                    f.write(f"   ‚Ä¢ {package}: {error}\n")
        
        print(f"üìÑ Relat√≥rio salvo em: {report_path}")
        
        return all_working


def main():
    """Fun√ß√£o principal de configura√ß√£o do ambiente."""
    print("üöÄ PROTECAI_MINI: CONFIGURA√á√ÉO COMPLETA DO LABORAT√ìRIO ML/AI")
    print("=" * 70)
    print("üéØ Objetivo: Ambiente completo para coordena√ß√£o de prote√ß√£o com IA")
    print()
    
    setup = EnvironmentSetup()
    
    # An√°lise inicial
    setup.analyze_dependencies()
    
    # Confirma√ß√£o do usu√°rio
    if setup.missing_packages or setup.incompatible_packages:
        print(f"\n‚ùì Deseja instalar/atualizar os pacotes? (y/n): ", end="")
        response = input().lower().strip()
        
        if response in ['y', 'yes', 's', 'sim']:
            # Instala√ß√£o
            success = setup.install_packages(force_reinstall=False)
            
            # Relat√≥rio final
            environment_ready = setup.generate_report()
            
            if environment_ready:
                print("\nüéâ LABORAT√ìRIO PROTECAI_MINI PRONTO PARA USO!")
                print("üî¨ Execute agora: python demonstracao_rl_completa.py")
            else:
                print("\n‚ö†Ô∏è Alguns problemas foram encontrados.")
                print("üìû Verifique o relat√≥rio e logs de erro.")
            
            return environment_ready
        else:
            print("‚ùå Instala√ß√£o cancelada pelo usu√°rio")
            return False
    else:
        # S√≥ verifica√ß√£o
        environment_ready = setup.generate_report()
        print("\n‚úÖ AMBIENTE J√Å CONFIGURADO!")
        return environment_ready


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Instala√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        print("üí° Tente executar novamente ou instale manualmente: pip install -r requirements.txt")
