#!/usr/bin/env python3
"""
Script para testar a API ProtecAI Mini.
Executa uma s√©rie de testes para validar todos os endpoints.
"""

import requests
import json
import time
from datetime import datetime
from pathlib import Path

# Configura√ß√£o
BASE_URL = "http://localhost:8000"
TIMEOUT = 30

def test_api():
    """Executa testes completos da API."""
    print("üîã Teste da API ProtecAI Mini")
    print("=" * 50)
    
    # 1. Teste de health check
    print("\n1Ô∏è‚É£ Teste de Health Check")
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 2. Teste de informa√ß√µes
    print("\n2Ô∏è‚É£ Teste de Informa√ß√µes")
    try:
        response = requests.get(f"{BASE_URL}/info", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Vers√£o: {data.get('version')}")
        print(f"   Endpoints: {len(data.get('endpoints', []))}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 3. Teste da rede el√©trica
    print("\n3Ô∏è‚É£ Teste da Rede El√©trica")
    try:
        response = requests.get(f"{BASE_URL}/network/topology", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Barras: {data.get('total_buses', 0)}")
        print(f"   Linhas: {data.get('total_lines', 0)}")
        print(f"   Geradores: {data.get('total_generators', 0)}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 4. Teste dos dispositivos de prote√ß√£o
    print("\n4Ô∏è‚É£ Teste dos Dispositivos de Prote√ß√£o")
    try:
        response = requests.get(f"{BASE_URL}/protection/devices", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Total de dispositivos: {data.get('total_devices', 0)}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 5. Teste das zonas de prote√ß√£o
    print("\n5Ô∏è‚É£ Teste das Zonas de Prote√ß√£o")
    try:
        response = requests.get(f"{BASE_URL}/protection/zones", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Total de zonas: {data.get('total_zones', 0)}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 6. Teste de simula√ß√£o r√°pida
    print("\n6Ô∏è‚É£ Teste de Simula√ß√£o R√°pida")
    try:
        simulation_config = {
            "fault_type": "short_circuit",
            "element_type": "bus",
            "element_id": 4,
            "fault_impedance": 0.01,
            "severity": "medium"
        }
        
        response = requests.post(
            f"{BASE_URL}/simulation/quick-analysis",
            json=simulation_config,
            timeout=TIMEOUT
        )
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            fault_current = data.get('fault_analysis', {}).get('fault_current', {})
            print(f"   Corrente de falta: {fault_current.get('magnitude', 0):.2f} A")
            print(f"   Barras afetadas: {len(data.get('fault_analysis', {}).get('affected_buses', []))}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 7. Teste de templates de simula√ß√£o
    print("\n7Ô∏è‚É£ Teste de Templates de Simula√ß√£o")
    try:
        response = requests.get(f"{BASE_URL}/simulation/templates", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Templates dispon√≠veis: {len(data.get('templates', []))}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 8. Teste de configura√ß√£o RL
    print("\n8Ô∏è‚É£ Teste de Configura√ß√£o RL")
    try:
        response = requests.get(f"{BASE_URL}/rl/config/default", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Epis√≥dios padr√£o: {data.get('episodes', 0)}")
        print(f"   Taxa de aprendizado: {data.get('learning_rate', 0)}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 9. Teste de modelos RL
    print("\n9Ô∏è‚É£ Teste de Modelos RL")
    try:
        response = requests.get(f"{BASE_URL}/rl/models", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Modelos dispon√≠veis: {data.get('total', 0)}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 10. Teste de templates de visualiza√ß√£o
    print("\nüîü Teste de Templates de Visualiza√ß√£o")
    try:
        response = requests.get(f"{BASE_URL}/visualization/templates", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Templates dispon√≠veis: {len(data.get('templates', []))}")
        for template in data.get('templates', []):
            print(f"   - {template.get('name')}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 11. Teste de formatos suportados
    print("\n1Ô∏è‚É£1Ô∏è‚É£ Teste de Formatos Suportados")
    try:
        response = requests.get(f"{BASE_URL}/visualization/formats", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Formatos de imagem: {data.get('image_formats', [])}")
        print(f"   Formatos de relat√≥rio: {data.get('report_formats', [])}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # 12. Teste de estat√≠sticas
    print("\n1Ô∏è‚É£2Ô∏è‚É£ Teste de Estat√≠sticas")
    try:
        response = requests.get(f"{BASE_URL}/simulation/statistics", timeout=TIMEOUT)
        print(f"   Status: {response.status_code}")
        data = response.json()
        print(f"   Total de simula√ß√µes: {data.get('total_simulations', 0)}")
        print(f"   Taxa de sucesso: {data.get('success_rate', 0):.1f}%")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ Teste da API conclu√≠do!")
    print(f"üïí Executado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")

def test_simulation_workflow():
    """Testa fluxo completo de simula√ß√£o."""
    print("\nüî¨ Teste de Fluxo de Simula√ß√£o Completo")
    print("=" * 50)
    
    # 1. Criar configura√ß√£o de simula√ß√£o
    simulation_config = {
        "name": "Teste API - Curto-circuito",
        "description": "Simula√ß√£o de teste via API",
        "faults": [
            {
                "fault_type": "short_circuit",
                "element_type": "bus",
                "element_id": 4,
                "fault_impedance": 0.01,
                "severity": "high"
            }
        ],
        "analysis_options": {
            "include_protection_analysis": True,
            "include_stability_analysis": True
        }
    }
    
    try:
        # 2. Iniciar simula√ß√£o
        print("\n1Ô∏è‚É£ Iniciando simula√ß√£o...")
        response = requests.post(
            f"{BASE_URL}/simulation/run",
            json=simulation_config,
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            simulation_id = data.get('simulation_id')
            print(f"   ‚úÖ Simula√ß√£o iniciada: {simulation_id}")
            
            # 3. Monitorar progresso
            print("\n2Ô∏è‚É£ Monitorando progresso...")
            for i in range(10):  # M√°ximo 10 tentativas
                time.sleep(1)
                
                response = requests.get(f"{BASE_URL}/simulation/status/{simulation_id}")
                if response.status_code == 200:
                    status_data = response.json()
                    status = status_data.get('status')
                    print(f"   Status: {status}")
                    
                    if status == "completed":
                        print("   ‚úÖ Simula√ß√£o conclu√≠da!")
                        
                        # 4. Obter resultados
                        print("\n3Ô∏è‚É£ Obtendo resultados...")
                        response = requests.get(f"{BASE_URL}/simulation/results/{simulation_id}")
                        if response.status_code == 200:
                            results = response.json()
                            print(f"   An√°lise de faltas: {len(results.get('results', {}).get('fault_analysis', []))}")
                            print(f"   A√ß√µes de prote√ß√£o: {len(results.get('results', {}).get('protection_response', []))}")
                            print(f"   Recomenda√ß√µes: {len(results.get('results', {}).get('recommendations', []))}")
                        break
                    
                    elif status == "failed":
                        print("   ‚ùå Simula√ß√£o falhou!")
                        break
                else:
                    print(f"   ‚ùå Erro ao verificar status: {response.status_code}")
                    break
            
        else:
            print(f"   ‚ùå Erro ao iniciar simula√ß√£o: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro no fluxo de simula√ß√£o: {e}")

def test_rl_workflow():
    """Testa fluxo completo de RL."""
    print("\nüß† Teste de Fluxo de RL Completo")
    print("=" * 50)
    
    # Configura√ß√£o de treinamento reduzida para teste
    training_config = {
        "episodes": 50,  # Reduzido para teste
        "learning_rate": 0.01,
        "discount_factor": 0.95,
        "epsilon_start": 1.0,
        "epsilon_end": 0.1,
        "epsilon_decay": 0.99,
        "reward_weights": {
            "coordination": 0.4,
            "response_time": 0.3,
            "selectivity": 0.3
        }
    }
    
    try:
        # 1. Iniciar treinamento
        print("\n1Ô∏è‚É£ Iniciando treinamento RL...")
        response = requests.post(
            f"{BASE_URL}/rl/train",
            json=training_config,
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            data = response.json()
            training_id = data.get('training_id')
            print(f"   ‚úÖ Treinamento iniciado: {training_id}")
            
            # 2. Monitorar progresso
            print("\n2Ô∏è‚É£ Monitorando progresso...")
            for i in range(15):  # M√°ximo 15 tentativas
                time.sleep(2)
                
                response = requests.get(f"{BASE_URL}/rl/training/status/{training_id}")
                if response.status_code == 200:
                    status_data = response.json()
                    status = status_data.get('status')
                    progress = status_data.get('progress', 0)
                    current_reward = status_data.get('current_reward', 0)
                    
                    print(f"   Status: {status} | Progresso: {progress:.1f}% | Recompensa: {current_reward:.2f}")
                    
                    if status == "completed":
                        print("   ‚úÖ Treinamento conclu√≠do!")
                        
                        # 3. Testar predi√ß√£o
                        print("\n3Ô∏è‚É£ Testando predi√ß√£o...")
                        test_state = {
                            "fault_current": 3000.0,
                            "fault_location": 4,
                            "system_loading": 0.7,
                            "protection_settings": {},
                            "network_topology": {}
                        }
                        
                        response = requests.post(
                            f"{BASE_URL}/rl/models/{training_id}/predict",
                            json=test_state,
                            timeout=TIMEOUT
                        )
                        
                        if response.status_code == 200:
                            prediction = response.json()
                            actions = prediction.get('prediction', {}).get('recommended_actions', [])
                            confidence = prediction.get('prediction', {}).get('confidence', 0)
                            print(f"   A√ß√µes recomendadas: {len(actions)}")
                            print(f"   Confian√ßa: {confidence:.2f}")
                        break
                    
                    elif status == "failed":
                        print("   ‚ùå Treinamento falhou!")
                        break
                else:
                    print(f"   ‚ùå Erro ao verificar status: {response.status_code}")
                    break
            
        else:
            print(f"   ‚ùå Erro ao iniciar treinamento: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro no fluxo de RL: {e}")

def main():
    """Fun√ß√£o principal."""
    print("üöÄ Iniciando testes da API ProtecAI Mini")
    print("Certifique-se de que a API est√° rodando em http://localhost:8000")
    print()
    
    # Verificar se a API est√° rodando
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API est√° rodando!")
        else:
            print("‚ùå API n√£o est√° respondendo corretamente")
            return
    except Exception as e:
        print(f"‚ùå Erro ao conectar com a API: {e}")
        print("Certifique-se de que a API est√° rodando com:")
        print("   python -m uvicorn src.backend.api.main:app --reload")
        return
    
    # Executar testes
    test_api()
    test_simulation_workflow()
    test_rl_workflow()
    
    print("\nüéâ Todos os testes conclu√≠dos!")

if __name__ == "__main__":
    main()
