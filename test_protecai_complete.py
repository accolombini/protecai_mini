#!/usr/bin/env python3
"""
Teste Completo do ProtecAI Mini
Sistema de Coordena√ß√£o de Prote√ß√£o com RL - IEEE 14-Bus
"""

import sys
import time
import requests
import json
from rl_protection_coordinator import ProtectionCoordinator

def test_rl_system():
    """Testa o sistema RL completo"""
    print("üîã TESTE COMPLETO DO PROTECAI MINI")
    print("=" * 60)
    
    # 1. Teste do Core RL
    print("\n1Ô∏è‚É£ Testando Sistema RL Core...")
    coordinator = ProtectionCoordinator()
    
    print(f"   ‚úÖ Sistema inicializado: {len(coordinator.protection_devices)} dispositivos")
    print(f"   ‚úÖ Zonas configuradas: {len(coordinator.protection_zones)}")
    
    # 2. Teste de Simula√ß√£o de Falta
    print("\n2Ô∏è‚É£ Testando Simula√ß√£o de Faltas...")
    scenarios = [
        {'bus': 4, 'fault_type': '3ph', 'severity': 0.8, 'name': 'Falta Trif√°sica Bus 4'},
        {'bus': 7, 'fault_type': '2ph', 'severity': 0.6, 'name': 'Falta Bif√°sica Bus 7'},
        {'bus': 14, 'fault_type': '1ph', 'severity': 0.5, 'name': 'Falta Monof√°sica Bus 14'}
    ]
    
    for scenario in scenarios:
        result = coordinator.simulate_fault(
            scenario['bus'], 
            scenario['fault_type'], 
            scenario['severity']
        )
        
        operating_devices = len([d for d in result.device_responses if d['should_operate']])
        coordination_status = "‚úÖ OK" if result.coordination_ok else "‚ö†Ô∏è  AJUSTE NECESS√ÅRIO"
        
        print(f"   üîç {scenario['name']}:")
        print(f"      Zona: {result.affected_zone} | Corrente: {result.fault_current_a:.0f}A")
        print(f"      Dispositivos Operando: {operating_devices} | Coordena√ß√£o: {coordination_status}")
    
    # 3. Teste de Treinamento RL
    print("\n3Ô∏è‚É£ Testando Treinamento RL...")
    train_result = coordinator.train_rl_agent(episodes=5)
    
    print(f"   ‚úÖ Epis√≥dios treinados: {train_result['episodes_completed']}")
    print(f"   ‚úÖ Total de epis√≥dios: {train_result['total_episodes']}")
    print(f"   ‚úÖ Epsilon final: {train_result['final_epsilon']:.3f}")
    
    # 4. Teste de Status do Sistema
    print("\n4Ô∏è‚É£ Testando Status do Sistema...")
    system_status = coordinator.get_system_status()
    rl_status = coordinator.get_rl_status()
    
    print(f"   ‚úÖ Sa√∫de do Sistema: {system_status['system_health']}")
    print(f"   ‚úÖ Status RL: {rl_status['status']}")
    print(f"   ‚úÖ Epis√≥dios RL: {rl_status['episodes']}")
    
    print("\n‚úÖ SISTEMA RL CORE: FUNCIONAL!")
    return True

def test_api_connection():
    """Testa conex√£o com a API"""
    print("\n5Ô∏è‚É£ Testando Conex√£o com API...")
    
    try:
        # Health check
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            print(f"   ‚úÖ API Status: {health_data['status']}")
            print(f"   ‚úÖ Vers√£o: {health_data['version']}")
            
            # Verificar servi√ßos
            services = health_data.get('services', {})
            for service, status in services.items():
                print(f"   ‚úÖ {service}: {status}")
            
            return True
        else:
            print(f"   ‚ùå API retornou c√≥digo: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("   ‚ö†Ô∏è  API n√£o est√° rodando. Execute: python start_api.py")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro na API: {e}")
        return False

def test_optimization_demo():
    """Demonstra otimiza√ß√£o RL em tempo real"""
    print("\n6Ô∏è‚É£ Demonstra√ß√£o de Otimiza√ß√£o RL...")
    
    coordinator = ProtectionCoordinator()
    
    # Cen√°rio inicial
    print("   üìä Avalia√ß√£o Inicial:")
    initial_score = coordinator._evaluate_coordination_quality()
    print(f"      Score Inicial: {initial_score:.1f}")
    
    # Otimiza√ß√£o r√°pida
    print("   ü§ñ Executando Otimiza√ß√£o (10 epis√≥dios)...")
    optimization_result = coordinator.optimize_protection_with_rl(episodes=10)
    
    print(f"   ‚úÖ Score Final: {optimization_result['best_coordination_score']:.1f}")
    print(f"   ‚úÖ Melhoria: {optimization_result['improvement']:.1f}")
    print(f"   ‚úÖ Ajustes Realizados: {optimization_result['total_adjustments']}")
    
    return True

def main():
    """Fun√ß√£o principal de teste"""
    start_time = time.time()
    
    # Testes sequenciais
    tests_passed = 0
    total_tests = 4
    
    # Core RL System
    if test_rl_system():
        tests_passed += 1
    
    # API Connection
    if test_api_connection():
        tests_passed += 1
    
    # Optimization Demo
    if test_optimization_demo():
        tests_passed += 1
    
    # Frontend Check
    print("\n7Ô∏è‚É£ Verificando Frontend...")
    try:
        response = requests.get("http://localhost:5173", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Frontend React: Operacional")
            tests_passed += 1
        else:
            print("   ‚ö†Ô∏è  Frontend: Executar 'npm run dev' no diret√≥rio frontend")
    except:
        print("   ‚ö†Ô∏è  Frontend: N√£o acess√≠vel em localhost:5173")
    
    # Relat√≥rio Final
    end_time = time.time()
    duration = end_time - start_time
    
    print("\n" + "=" * 60)
    print("üìã RELAT√ìRIO FINAL DO TESTE")
    print("=" * 60)
    print(f"‚úÖ Testes Aprovados: {tests_passed}/{total_tests}")
    print(f"‚è±Ô∏è  Tempo Total: {duration:.2f} segundos")
    
    if tests_passed == total_tests:
        print("üéâ PROTECAI MINI: 100% FUNCIONAL!")
        print("\nüåê Acesse:")
        print("   ‚Ä¢ Backend API: http://localhost:8000/docs")
        print("   ‚Ä¢ Frontend: http://localhost:5173")
        return 0
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique os logs acima.")
        return 1

if __name__ == "__main__":
    exit(main())
